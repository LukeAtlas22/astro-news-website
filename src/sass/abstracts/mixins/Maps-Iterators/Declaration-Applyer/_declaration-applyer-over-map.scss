@use "sass:map";
@use "sass:string";
@use "../Breakpoint-Map/spread-every-prop-from-submap-foreach-breakpoint-in-map" as *;
@use "helpers/utils" as *;
@use "../Breakpoint-Map/helpers/media-query" as *;
// Note - Ho bisogno di un fix quassù ^

$ALLOWED_DEFAULT: (
  hover,
  active,
  focus-visible,
  focus,
  target-current,
);

$ONLY_NORMAL: (

);

@function generate-states-map($from, $allowed-pseudo-classes) {
  $States-Map: create-states-map($allowed-pseudo-classes);

    @each $property, $value in $from {
      $suffix: get-suffix-pseudoclass($property, $allowed-pseudo-classes);
      @if (not $suffix) { $suffix: normal }; // Note - Non so se può dare problemi
      $clean-property: remove-suffix($property, $suffix);
      $target-state: map.get($States-Map, $suffix);
      $target-state: map.merge($target-state, ($clean-property: $value));
      $States-Map: map.merge($States-Map, ($suffix: $target-state));
    }

    @return $States-Map;
};

@mixin consume-states-map($States-Map, $exclude, $unallow, $aliasies){
  @each $state, $declaration-map in $States-Map {
   @if ($state != normal) {
      &:is(:#{$state}, .#{$state}) {
        @include Spread-Properties-From-Map(
          $map: $declaration-map, 
          $props-to-exclude: $exclude, 
          $props-to-unallow: $unallow,
          $aliasies: $aliasies
        );
      }
    }
    @if ($state == normal) {
      @include Spread-Properties-From-Map(
        $map: $declaration-map, 
        $props-to-exclude: $exclude, 
        $props-to-unallow: $unallow,
        $aliasies: $aliasies
      );
    } 
  }
}

///
/// @param {SCSS Map} $from - The map where you will get the declarations
/// @param {List of string} $exclude - Props name you want to exclude
/// @param {List of string} $unallow - Props name you want to disable (throws error if user tries to write an unallowed prop in the map)
/// @output
@mixin apply-declarations(
  $from, 
  $allowed-pseudo-classes: $ALLOWED_DEFAULT,
  $exclude: null,
  $unallow: null,
  $aliasies: null,
) {
  $States-Map: generate-states-map($from, $allowed-pseudo-classes);
  @include consume-states-map($States-Map, $exclude, $unallow, $aliasies);
  
}

// Here we call apply-declaration for each breakpoint INNER MAP 
@mixin apply-declarations-for-each-breakpoint($from, $allowed-pseudo-classes: $ALLOWED_DEFAULT, $exclude: null, $unallow: null, $aliasies: null) {
  @each $breakpoint, $breakpoint-inner-map in $from {
    @if ($breakpoint == 'default') {
      @include apply-declarations($breakpoint-inner-map, $allowed-pseudo-classes, $exclude, $unallow, $aliasies );
    }
    @else if ($breakpoint != 'default') {
      @include media-query(#{$breakpoint}) {
        @include apply-declarations($breakpoint-inner-map, $allowed-pseudo-classes, $exclude, $unallow, $aliasies );
      }
    }
  }
}

// Note - Questo potrebbe sostituire il prop-spreader-submap, così rendiamo prop-spreader una dipendenza di declaration applyer, e non lo usiamo più nel codice - apply-declaration quindi potrebbe cominciare a funzionare
// Note - Sia così -> hover: (background-color, ecc, ecc)
// Note - Sia così -> background-color-hover, ecc-hover, ecc-hover
@mixin apply-declaration-from-submap-for-each-breakpoint ($breakpoint-map, $submap, $allowed-pseudo-classes: $ONLY_NORMAL, $exclude: null, $unallow: null, $aliasies: null) {
  @each $breakpoint, $breakpoint-inner-map in $from {

    $submap: map.get($breakpoint-inner-map, $submap);

    @if ($breakpoint == 'default') {
      @include apply-declarations($submap, $allowed-pseudo-classes, $exclude, $unallow, $aliasies );
    }
    @else if ($breakpoint != 'default') {
      @include media-query(#{$breakpoint}) {
        @include apply-declarations($submap, $allowed-pseudo-classes, $exclude, $unallow, $aliasies );
      }
    }
  }
}