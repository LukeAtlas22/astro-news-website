 @use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "prop-directive-type" as Prop-Directive;

@use "../../../function/validations" as *;
@use "../../../function/modificators/get-unicode-from-number/get-unicode-from-number" as *;



@function is-string-in-list($string, $list){
  @if list.index($list, $string) {
    @return true;
  } @else {
    @return false;
  }
}

@function is-prop-in-exclude-list($prop-name, $props-to-exclude) {
  @return is-string-in-list($prop-name, $props-to-exclude);
}

@function is-prop-in-unallow-list($prop-name, $props-to-unallow) {
  @return is-string-in-list($prop-name, $props-to-unallow);
}


@function get-prop-name($prop-directive){
  @return map.get($prop-directive, Prop-Directive.$PROP_NAME_KEY);
}

@function resolve-css-prop-name($prop-directive) {
  $css-prop: map.get($prop-directive, prop-name);
  @if (map.get($prop-directive, Prop-Directive.$CSS_ALIAS_KEY)) {
    $css-prop: map.get($prop-directive, Prop-Directive.$CSS_ALIAS_KEY);
  }
  @return $css-prop;
}



// For the error
@function map-to-string($map) {
  $result: "";

  @each $key, $value in $map {
    $result: if($result == "", "#{$key}: #{$value}", "#{$result}, #{$key}: #{$value}");
  }

  @return $result;
}