@use "sass:math";
@use "sass:meta";
@use "sass:map";
@use "breakpoints" as *;
@use "tokens" as *;

@mixin mq($type, $size, $breakpoint) {
  @if ($type != min and $type != max) {
    @error "Type not allowed";
  }
  @if ($size != width and $size != height) {
    @error "Size not allowed";
  }

  @if (
    not(map.has-key($breakpoints, $breakpoint)) and
      (meta.type-of($breakpoint) != number)
  ) {
    @error "Breakpoint is not in the map";
  }

  @if (meta.type-of($breakpoint) == number and math.is-unitless($breakpoint)) {
    @error "Breakpoint has no unit";
  }

  @if (meta.type-of($breakpoint) == number) {
    $breakpoint: $breakpoint;
  }

  @if (meta.type-of($breakpoint) == string) {
    $breakpoint: map.get($breakpoints, $breakpoint);
  }

  @media screen and (#{$type}-#{$size}: $breakpoint) {
    @content;
  }
}

// ===============
// H e a d i n g s
// ===============
@mixin heading(
  $fs: $heading-font-size-default,
  $color: $heading-color-default
) {
  font-size: $fs;
  color: $color;

  font-family: $heading-font-family;
  text-transform: $heading-text-transform;
  letter-spacing: $heading-letter-spacing;
  font-weight: $heading-font-weight;
  line-height: $heading-line-height;
}

// =====================
// F l e x - C e n t e r
// =====================
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
}

// ======================
// P s e u d o - Elements
// ======================
@mixin pseudo {
  content: "";
  display: block;
}
@mixin pseudo-absolute {
  content: "";
  display: block;
  position: absolute;
}
@mixin pseudo-fixed-inset-0 {
  content: "";
  position: fixed;
  inset: 0;
}

// =====================
// U t i l i t y - D e v
// =====================
@mixin body-center {
  body {
    display: grid !important;
    min-height: 100vh !important;
    place-items: center !important;
  }
}

@mixin debug {
  outline: 2px solid red;
}

//
//
// Screen readers only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  text-wrap: nowrap;
  border: 0;
}

//
//
// Line clamp
///
/// @param {type} $n - Specify the maximum number of lines to show
@mixin line-clamp($n) {
  @if (not($n == none or meta.type-of($n) != number or $n == 0)) {
    display: -webkit-box;
    overflow: clip;
    -webkit-line-clamp: $n; /* number of lines to show */
    line-clamp: $n;
    -webkit-box-orient: vertical;
  }
}

/// Allows you do to position:absolute & inset() - You can then, choose the inset (for all the four inset properties)
/// Positive values expand the inset
/// Negative values will shrink it down
/// @param {<length>} $inset-value - CSS Length to express the inset value, default is: 0rem
/// @example
///   @include absolute-anchor-inset(0.25rem)
///   @include absolute-anchor-inset(0)
@mixin absolute-anchor-inset($inset-value: 0rem) {
  position: absolute;
  top: calc(anchor(top) + ($inset-value * -1));
  left: calc(anchor(left) + ($inset-value * -1));
  right: calc(anchor(right) + ($inset-value * -1));
  bottom: calc(anchor(bottom) + ($inset-value * -1));
}
