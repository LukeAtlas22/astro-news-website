@use "sass:string";
@use "sass:map";
@use "sass:meta";
@use "sass:list";

@use "../schema/prop-directive.schema" as Prop-Directive;
@use "../hooks/validations/" as *;

@function validate($function, $value, $parameters: null){
  @if ($parameters) {
    @return meta.call($function, $value, $parameters);
  } @else {
    @return meta.call($function, $value)
  }
};

@function resolve-function-name($validator-fn-name) {
  @if string.index($validator-fn-name, "is-") == 1 {
    @return $validator-fn-name;
  }
  @return "is-#{$validator-fn-name}";
}

@function construct-validation-function($validator-fn-name){
  $function-name: resolve-function-name($validator-fn-name);
  $function: meta.get-function($function-name);
  @return $function;
}

@function get-validation-hook($prop-directive){
  @return map.get($prop-directive, Prop-Directive.$VALIDATION_HOOK_KEY);
}

@function is-validation-requested-in($prop-directive){
  @return map.has-key($prop-directive, Prop-Directive.$VALIDATION_HOOK_KEY);
}


@function is-validator-with-parameters($validator) {
  // Controlla se il valore Ã¨ una lista
  @if meta.type-of($validator) != 'list' {
    @return false;
  }

  // Controlla se la lista ha esattamente due elementi
  @if list.length($validator) == 2 {
    @return true;
  } @else {
    @return false;
  }
}
