@use "sass:map";
@use "../tokens" as *;
@use "../../../../abstracts/" as *;
@use "../../../../icons/" as *; // Note - Da rivedere, questo è fuori dal Carousel Domain
@use "../abstract/" as *;
@use "../abstract/globals/globals" as Glob;
@use "../abstract/function/carousel-functions.scss" as Carousel;
// Note - Migliorare la gestione di questi import come abbiamo fatto con l'Article Component

@if not Carousel.User-Wants-Buttons() { @include BothButtons { display: none }};

@if Carousel.User-Wants-Buttons(){

  // ▄▀▄ ▄▀▀ █▀▄ ██▀ ▄▀▀ ▀█▀
  // █▀█ ▄█▀ █▀  █▄▄ ▀▄▄  █

  @include BothButtons(){
    content: ""; // Notes - Here we gonna tokenize our variable for the icon font
    cursor: pointer;
    z-index: 99;
  
    @include Consume-PropsDirectives-ForEach-Breakpoint-Map(
      $Map: $carousel-buttons-style,
      $props-directives-map: (
        
        (
          prop-name: color,
        ),
        (
          prop-name: background,
        ),
        (
          prop-name: border,
        ),
        (
          prop-name: border-radius,
        ),
        (
          prop-name: border-offset,
          as: padding,
        ),
        (
          prop-name: transition,
          as: transition-duration
        ),
      )
    );

    background-clip: content-box !important; // For border offset | Leave it
    transition-property: Glob.$CAROUSEL-ELEMENT-TRANSITION-PROPS; 
  }


  // Note - Memo - For the interaction selectors, we had problems on artificial afters

  @include BothButtons--Hover{
    @include Spread-Properties-From-Submap-ForEach-Breakpoint-In-Map(
      $breakpoint-map: $carousel-buttons-style, 
      $submap-to-spread: hover,
    );
  }

  @include BothButtons--Active{
    @include Spread-Properties-From-Submap-ForEach-Breakpoint-In-Map(
      $breakpoint-map: $carousel-buttons-style, 
      $submap-to-spread: active,
    );  
  }

  @include BothButtons--Focus-Visible{
    @include Spread-Properties-From-Submap-ForEach-Breakpoint-In-Map(
      $breakpoint-map: $carousel-buttons-style, 
      $submap-to-spread: focus-visible,
    );
  }

  @container --carousel-container not style(--infinite-scroll: true){ 
    // Note - Memo - Questa custom prop non è stata ancora implementata
    @include BothButtons--Disabled{
      @include Spread-Properties-From-Submap-ForEach-Breakpoint-In-Map(
        $breakpoint-map: $carousel-buttons-style, 
        $submap-to-spread: disabled,
      );
    }
  }

  // ▄▀▀ █ ▀█▀ █ █▄ █ ▄▀  
  // ▄█▀ █ █▄▄ █ █ ▀█ ▀▄█ // Note - Qui sotto, allineare con artificial pseudo button
  
  @include BothButtons {
    @container style(--buttons-orientation: horizontal) {  
      width: var(--buttons-height);
      height: var(--buttons-width);
    }
  }

  @include BothButtons {
    @container style(--buttons-orientation: vertical) {
      width: var(--buttons-height);
      height: var(--buttons-width);
    }
  }


  // ▄▀▄ █▀▄ █ ██▀ █▄ █ ▀█▀ ▄▀▄ ▀█▀ █ ▄▀▄ █▄ █
  // ▀▄▀ █▀▄ █ █▄▄ █ ▀█  █  █▀█  █  █ ▀▄▀ █ ▀█ // Note - Qui sotto, allineare con artificial pseudo button (in caso di width & height sfasate e rotation particolari)

  @container --carousel-container style(--buttons-orientation: horizontal) {
    @include NextButton {
      rotate: 0deg;
    }
    @include PrevButton {
      rotate: 180deg;
    }
  }

  @container --carousel-container style(--buttons-orientation: vertical) {
    @include NextButton {
      rotate: 90deg;
    }
    @include PrevButton {
      rotate: -90deg;
    }
  }


  // █▀▄ ▄▀▄ ▄▀▀ █ ▀█▀ █ ▄▀▄ █▄ █ █ █▄ █ ▄▀
  // █▀  ▀▄▀ ▄█▀ █  █  █ ▀▄▀ █ ▀█ █ █ ▀█ ▀▄█ // Note - Qui sotto, allineare con artificial pseudo button

  @include BothButtons {
    position: absolute;
    position-anchor: --carousel;
  }

  // Translating back in y to element size
  @include BothButtons() {
    translate: 0 -50%;
  }

  // Position 1 - Outside carousel
  @container style(--buttons-position: outside-carousel) {
    @include NextButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 2 - Inside carousel
  @container style(--buttons-position: inside-frame) {
    @include NextButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 3 - Feet carousel
  @container style(--buttons-position: feet-carousel) {
    @include BothButtons {
      translate: none;
    }

    @include NextButton() {
      top: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 4 - Head carousel
  @container style(--buttons-position: head-carousel) {
    @include BothButtons {
      translate: none;
    }

    @include NextButton() {
      bottom: calc(anchor(top) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      bottom: calc(anchor(top) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 5 - Right carousel
  @container style(--buttons-position: right-carousel) {
    @include NextButton() {
      bottom: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(top) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include BothButtons() {
      translate: 0 0;
    }
  }

  // Position 6 - Left carousel
  @container style(--buttons-position: left-carousel) {
    @include NextButton() {
      bottom: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(top) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }

    @include BothButtons() {
      translate: 0 0;
    }
  }

  // anchor(<anchor-name> <anchor-side>, <length-percentage>)
  // Memo - No need to offset here.
  @container --carousel-container style(--buttons-position: align-on-navigation-and-carousel-margins){
    @container --carousel-container style(--scroll-marker-group-orientation: horizontal) {
      @include BothButtons{
        
      }
      @include PrevButton{
        top: anchor(--scroll-marker-group center);
        left: calc(anchor(--carousel left) + var(--buttons-position-horizontal-offset));
      }
      @include NextButton {
        top: anchor(--scroll-marker-group center);
        right: calc(anchor(--carousel right) + var(--buttons-position-horizontal-offset));
      }
    }
    @container --carousel-container style(--scroll-marker-group-orientation: vertical) {
      @include BothButtons{
        translate: 50% 0;
      }
      @include PrevButton{
        top: calc(anchor(--carousel top) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
      @include NextButton {
        bottom: calc(anchor(--carousel bottom) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
    }
  }

  // anchor(<anchor-name> <anchor-side>, <length-percentage>)
    @container --carousel-container style(--buttons-position: align-on-navigation){
    @container --carousel-container style(--scroll-marker-group-orientation: horizontal) {
      @include BothButtons{
        
      }
      @include PrevButton{
        top: anchor(--scroll-marker-group center);
        right: calc(anchor(--scroll-marker-group left) + var(--buttons-position-horizontal-offset));
      }
      @include NextButton {
        top: anchor(--scroll-marker-group center);
        left: calc(anchor(--scroll-marker-group right) + var(--buttons-position-horizontal-offset));
      }
    }
    @container --carousel-container style(--scroll-marker-group-orientation: vertical) {
      @include BothButtons{
        translate: 50% 0;
      }
      @include PrevButton{
        bottom: calc(anchor(--scroll-marker-group top) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
      @include NextButton {
        top: calc(anchor(--scroll-marker-group bottom) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
    }
  }

  // No display - Display none
  @container style(--buttons-position: display-none) {
    @include BothButtons() {
      display: none;
    }
  }



  // █▀ █ █ █▄ █ ▄▀▀ ▀█▀ █ ▄▀▄ █▄ █ ▄▀▄ █   █ ▀█▀ ▀▄▀
  // █▀ ▀▄█ █ ▀█ ▀▄▄  █  █ ▀▄▀ █ ▀█ █▀█ █▄▄ █  █   █
  
  // Note - In attesa che i valori next e prev di scroll-button() diventino disponibili, usiamo questo work-around
  
  @container --carousel-container style(--carousel-scroll-direction: horizontal){
    @include Buttons-Axis-Vertical { display: none }
  }
  
  @container --carousel-container style(--carousel-scroll-direction: vertical) {
    @include Buttons-Axis-Horizontal { display: none };
  }

  
} // <--  Ending Main IF Statement

