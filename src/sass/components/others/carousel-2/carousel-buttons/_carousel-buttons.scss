@use "sass:map";
@use "../tokens" as *;

@use "../../../../abstracts/" as *;
@use "../../../../icons/" as *; // Note - Da rivedere, questo è fuori dal Carousel Domain
@use "../abstract/" as *;

@use "../abstract/globals/globals" as Glob;

// Todo - Ci vorrebbe una main if - Che wrappa tutto questo - Questo dev'essere iniettato nel codice, soltanto se l'utente desidera utilizzare i buttons - 
// ! - Creare una variabile - Use buttons on website?

// Todo - Tutta l'astrazione dei buttons dev'essere wrappata intorno a un @if - Se l'utente desidera effettivamente usare i buttons AT all sul suo carosello

// Note ora servono principalmente due mappature
// Note - Un mixin mappa il layout, le cose relative al layout devono essere necessariamente CSS - Var, perchè saranno di utilità di tutto il codice del carosello
// Note - L'altra mappatura ingaggia lo stile, e può essere semplici CSS Props.




@if ($carousel-buttons-display != yes) {
  @include BothButtons() {
    display: none;
  }
}

@if ($carousel-buttons-display == yes){

  // ▄▀▄ ▄▀▀ █▀▄ ██▀ ▄▀▀ ▀█▀
  // █▀█ ▄█▀ █▀  █▄▄ ▀▄▄  █

  @include BothButtons() {
    border-radius: $carousel-buttons-border-radius;
  }

  @include BothButtonsPseudo{
    content: "";
    cursor: pointer;
    
    //opacity: 0;
    // z-index: 1; //?Putting the pseudoelements over the normal elements
    // Questo non serve più - Da ora lavoriamo solo con gli pseudo-element
  }

  // Only apply style on Real-DOM Buttons (for optimization)
  // Note - Ma perchè poi ho scelto di usare questi buttons DOM se nell'implementazione non li usiamo proprio per hokkare il click? - Ah, per l'icona.
  @include BothButtonsDOM(){
  
    @include Breakpoints-Map--Consume-PropsDirectives-ForEach-Breakpoint-Map(
      $Map: $carousel-buttons-style,
      $props-directives-map: (
        
        (
          prop-name: color,
        ),
        (
          prop-name: background,
        ),
        (
          prop-name: border,
        ),
        (
          prop-name: border-radius,
        ),
        (
          prop-name: border-offset,
          as: padding,
        ),
      )
    );

    background-clip: content-box;
  }

  @include BothButtonsDOM{
    opacitY: 0;
  }
  @include BothButtonsPseudo{
    opacity: 1;
  }
  
  .carousel::scroll-button(right){
    anchor-name: --test-right-button;
  }
  
  // @include BothButtonsDOM--Active{

  // }
  // @include BothButtonsDOM--Focus-Visible{

  // }
  
  // @include BothButtonsDOM--Disabled{} // Note da vedere come fare nei mixin sel
 

  // █ ▄▀▀ ▄▀▄ █▄ █
  // █ ▀▄▄ ▀▄▀ █ ▀█

  $icon-url: getIcon($arrow-icons-map, $carousel-buttons-arrow-icon-shape);

  @include BothButtonsDOM() {
    @include flex-center;
    @include setIconOn(
      $url: $icon-url,
      $color: $carousel-buttons-arrow-icon-color,
      $inset: $carousel-buttons-arrow-icon-inset,
      $stroke-width: $carousel-buttons-arrow-icon-stroke-width,
      $outline: $carousel-buttons-arrow-icon-outline,
      $outline-offset: $carousel-buttons-arrow-icon-outline-offset,
      $outline-color: $carousel-buttons-arrow-icon-outline-color,
      $rescale: $carousel-buttons-arrow-icon-rescale
    );
  }


  // ▄▀▀ █ ▀█▀ █ █▄ █ ▄▀  
  // ▄█▀ █ █▄▄ █ █ ▀█ ▀▄█ 
  
  @include NextButton {
    @container style(--buttons-orientation: horizontal) {  
      width: var(--buttons-height);
      height: var(--buttons-width);
    }
  }

  @include PrevButton {
    @container style(--buttons-orientation: horizontal) {
      width: var(--buttons-height);
      height: var(--buttons-width);
    }
  }

  // ▄▀▄ █▀▄ █ ██▀ █▄ █ ▀█▀ ▄▀▄ ▀█▀ █ ▄▀▄ █▄ █
  // ▀▄▀ █▀▄ █ █▄▄ █ ▀█  █  █▀█  █  █ ▀▄▀ █ ▀█

  @include NextButton() {
    @container style(--buttons-orientation: horizontal) {
      rotate: 90deg;
    }
    @container style(--buttons-orientation: vertical) {
      rotate: 180deg;
    }
  }
  @include PrevButton() {
    @container style(--buttons-orientation: horizontal) {
      rotate: -90deg;
    }
    @container style(--buttons-orientation: vertical) {
      rotate: 0deg;
    }
  }

  // █▀▄ ▄▀▄ ▄▀▀ █ ▀█▀ █ ▄▀▄ █▄ █ █ █▄ █ ▄▀
  // █▀  ▀▄▀ ▄█▀ █  █  █ ▀▄▀ █ ▀█ █ █ ▀█ ▀▄█


  @include BothButtons {
    position: absolute;
    position-anchor: --carousel;
  }

  // Translating back in y to element size
  @include BothButtons() {
    translate: 0 -50%;
  }

  // Position 1 - Outside carousel
  @container style(--buttons-position: outside-carousel) {
    @include NextButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 2 - Inside carousel
  @container style(--buttons-position: inside-carousel) {
    @include NextButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(center) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 3 - Feet carousel
  @container style(--buttons-position: feet-carousel) {
    @include BothButtons {
      translate: none;
    }

    @include NextButton() {
      top: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 4 - Head carousel
  @container style(--buttons-position: head-carousel) {
    @include BothButtons {
      translate: none;
    }

    @include NextButton() {
      bottom: calc(anchor(top) + var(--buttons-position-vertical-offset));
      right: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      bottom: calc(anchor(top) + var(--buttons-position-vertical-offset));
      left: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }
  }

  // Position 5 - Right carousel
  @container style(--buttons-position: right-carousel) {
    @include NextButton() {
      bottom: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(top) + var(--buttons-position-vertical-offset));
      left: calc(anchor(right) + var(--buttons-position-horizontal-offset));
    }

    @include BothButtons() {
      translate: 0 0;
    }
  }

  // Position 6 - Left carousel
  @container style(--buttons-position: left-carousel) {
    @include NextButton() {
      bottom: calc(anchor(bottom) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }

    @include PrevButton() {
      top: calc(anchor(top) + var(--buttons-position-vertical-offset));
      right: calc(anchor(left) + var(--buttons-position-horizontal-offset));
    }

    @include BothButtons() {
      translate: 0 0;
    }
  }


  // Position 6 - Inside Navigation
  // We decided to remove this.
  // @container --carousel-container style(--buttons-position: inside-navigation) {
  //   @include BothButtons{
  //     position-anchor: --scroll-marker-group;
  //   }

  //   @container --carousel-container style(--scroll-marker-group-orientation: horizontal){
  //     @include NextButton() {
  //       top: anchor(center);
  //       left: anchor(right);
  //     }
  //     @include PrevButton() {
  //       top: anchor(center);
  //       right: anchor(left);
  //     }
  //   }

  //   @container --carousel-container style(--scroll-marker-group-orientation: vertical){
  //     @include NextButton() {
  //       top: anchor(bottom);
  //       left: anchor(center);
  //     }
  //     @include PrevButton() {
  //       bottom: anchor(top);
  //       left: anchor(center);
  //     }
  //     @include BothButtons(){
  //       translate: -50% 0;
  //     }
  //   }
  // }

  // anchor(<anchor-name> <anchor-side>, <length-percentage>)
  // Memo - No need to offset here.
  @container --carousel-container style(--buttons-position: align-on-navigation-and-carousel-margins){
    @container --carousel-container style(--scroll-marker-group-orientation: horizontal) {
      @include BothButtons{
        
      }
      @include PrevButton{
        top: anchor(--scroll-marker-group center);
        left: calc(anchor(--carousel left) + var(--buttons-position-horizontal-offset));
      }
      @include NextButton {
        top: anchor(--scroll-marker-group center);
        right: calc(anchor(--carousel right) + var(--buttons-position-horizontal-offset));
      }
    }
    @container --carousel-container style(--scroll-marker-group-orientation: vertical) {
      @include BothButtons{
        translate: 50% 0;
      }
      @include PrevButton{
        top: calc(anchor(--carousel top) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
      @include NextButton {
        bottom: calc(anchor(--carousel bottom) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
    }
  }

  // Note - Potrei fare in ogni anchor, un offset-top, offset-right, offset-bottom, offset-left - Come CSS VAR
  // anchor(<anchor-name> <anchor-side>, <length-percentage>)
    @container --carousel-container style(--buttons-position: align-on-navigation){
    @container --carousel-container style(--scroll-marker-group-orientation: horizontal) {
      @include BothButtons{
        
      }
      @include PrevButton{
        top: anchor(--scroll-marker-group center);
        right: calc(anchor(--scroll-marker-group left) + var(--buttons-position-horizontal-offset));
      }
      @include NextButton {
        top: anchor(--scroll-marker-group center);
        left: calc(anchor(--scroll-marker-group right) + var(--buttons-position-horizontal-offset));
      }
    }
    @container --carousel-container style(--scroll-marker-group-orientation: vertical) {
      @include BothButtons{
        translate: 50% 0;
      }
      @include PrevButton{
        bottom: calc(anchor(--scroll-marker-group top) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
      @include NextButton {
        top: calc(anchor(--scroll-marker-group bottom) + var(--buttons-position-vertical-offset));
        right: anchor(--scroll-marker-group center);
      }
    }
  }

  // No display - Display none
  @container style(--buttons-position: display-none) {
    @include BothButtons() {
      display: none;
    }
  }

  // █▀ █ █ █▄ █ ▄▀▀ ▀█▀ █ ▄▀▄ █▄ █ ▄▀▄ █   █ ▀█▀ ▀▄▀
  // █▀ ▀▄█ █ ▀█ ▀▄▄  █  █ ▀▄▀ █ ▀█ █▀█ █▄▄ █  █   █
  //! In attesa che i valori next e prev di scroll-button() diventino disponibili, usiamo questo work-around
  .carousel__container {
    --scroll-direction: #{$carousel-scroll-direction};
  }
  @container style(--scroll-direction: vertical) {
    //? Moving the up and down button in front of the right and left, for vertical scrolling...
    .carousel::scroll-button(down){z-index: 1;};
    .carousel::scroll-button(right){z-index: -1};
    .carousel::scroll-button(up){z-index: 1};
    .carousel::scroll-button(left){z-index: -1;}
  }
  @container style(--scroll-direction: horizontal) {
    //? The opposite...
    .carousel::scroll-button(down){z-index: -1;};
    .carousel::scroll-button(right){z-index: 1};
    .carousel::scroll-button(up){z-index: -1};
    .carousel::scroll-button(left){z-index: 1;}
  }
}